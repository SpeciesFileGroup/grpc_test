// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: question.proto
#ifndef GRPC_question_2eproto__INCLUDED
#define GRPC_question_2eproto__INCLUDED

#include "question.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

// Defining a Unary service currently 
// Extend to Server/Client/Bidirectional Streaming RPCs in the future 
// Details on what these are can be found at https://grpc.io/docs/guides/concepts.html
class QuestionService final {
 public:
  static constexpr char const* service_full_name() {
    return "QuestionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status UnaryRequest(::grpc::ClientContext* context, const ::QuestionRequest& request, ::QuestionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::QuestionResponse>> AsyncUnaryRequest(::grpc::ClientContext* context, const ::QuestionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::QuestionResponse>>(AsyncUnaryRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::QuestionResponse>> PrepareAsyncUnaryRequest(::grpc::ClientContext* context, const ::QuestionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::QuestionResponse>>(PrepareAsyncUnaryRequestRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::QuestionResponse>* AsyncUnaryRequestRaw(::grpc::ClientContext* context, const ::QuestionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::QuestionResponse>* PrepareAsyncUnaryRequestRaw(::grpc::ClientContext* context, const ::QuestionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status UnaryRequest(::grpc::ClientContext* context, const ::QuestionRequest& request, ::QuestionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::QuestionResponse>> AsyncUnaryRequest(::grpc::ClientContext* context, const ::QuestionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::QuestionResponse>>(AsyncUnaryRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::QuestionResponse>> PrepareAsyncUnaryRequest(::grpc::ClientContext* context, const ::QuestionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::QuestionResponse>>(PrepareAsyncUnaryRequestRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::QuestionResponse>* AsyncUnaryRequestRaw(::grpc::ClientContext* context, const ::QuestionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::QuestionResponse>* PrepareAsyncUnaryRequestRaw(::grpc::ClientContext* context, const ::QuestionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UnaryRequest_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status UnaryRequest(::grpc::ServerContext* context, const ::QuestionRequest* request, ::QuestionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UnaryRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UnaryRequest() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UnaryRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnaryRequest(::grpc::ServerContext* context, const ::QuestionRequest* request, ::QuestionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnaryRequest(::grpc::ServerContext* context, ::QuestionRequest* request, ::grpc::ServerAsyncResponseWriter< ::QuestionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UnaryRequest<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_UnaryRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UnaryRequest() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UnaryRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnaryRequest(::grpc::ServerContext* context, const ::QuestionRequest* request, ::QuestionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnaryRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UnaryRequest() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::QuestionRequest, ::QuestionResponse>(std::bind(&WithStreamedUnaryMethod_UnaryRequest<BaseClass>::StreamedUnaryRequest, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UnaryRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnaryRequest(::grpc::ServerContext* context, const ::QuestionRequest* request, ::QuestionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnaryRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::QuestionRequest,::QuestionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UnaryRequest<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UnaryRequest<Service > StreamedService;
};


#endif  // GRPC_question_2eproto__INCLUDED
