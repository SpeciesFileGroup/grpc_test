# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import questionstream_pb2 as questionstream__pb2


class QuestionServiceStub(object):
  """Defining a Unary service currently 
  Extend to Server/Client/Bidirectional Streaming RPCs in the future 
  Details on what these are can be found at https://grpc.io/docs/guides/concepts.html
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.UnaryRequest = channel.stream_stream(
        '/QuestionService/UnaryRequest',
        request_serializer=questionstream__pb2.QuestionRequest.SerializeToString,
        response_deserializer=questionstream__pb2.QuestionResponse.FromString,
        )


class QuestionServiceServicer(object):
  """Defining a Unary service currently 
  Extend to Server/Client/Bidirectional Streaming RPCs in the future 
  Details on what these are can be found at https://grpc.io/docs/guides/concepts.html
  """

  def UnaryRequest(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_QuestionServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'UnaryRequest': grpc.stream_stream_rpc_method_handler(
          servicer.UnaryRequest,
          request_deserializer=questionstream__pb2.QuestionRequest.FromString,
          response_serializer=questionstream__pb2.QuestionResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'QuestionService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
